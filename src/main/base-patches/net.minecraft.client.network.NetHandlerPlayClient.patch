--- net/minecraft/client/network/NetHandlerPlayClient.java
+++ net/minecraft/client/network/NetHandlerPlayClient.java
@@ -234,7 +234,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class NetHandlerPlayClient implements INetHandlerPlayClient {
+public class NetHandlerPlayClient implements INetHandlerPlayClient/* WDL >>> */, wdl.ducks.IBaseChangesApplied/* <<< WDL */ {
 	private static final Logger LOGGER = LogManager.getLogger();
 	/**
 	 * The NetworkManager instance used to communicate with the server, used to respond to various packets (primarilly
@@ -691,6 +691,10 @@
 	}
 
 	public void processChunkUnload(SPacketUnloadChunk packetIn) {
+		/* WDL >>> */
+		wdl.WDLHooks.onNHPCHandleChunkUnload(this, this.world, packetIn);
+		/* <<< WDL */
+
 		PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
 		this.world.doPreChunk(packetIn.getX(), packetIn.getZ(), false);
 	}
@@ -714,6 +718,10 @@
 	 * Invoked when disconnecting, the parameter is a ChatComponent describing the reason for termination
 	 */
 	public void onDisconnect(ITextComponent reason) {
+		/* WDL >>> */
+		wdl.WDLHooks.onNHPCDisconnect(this, reason);
+		/* <<< WDL */
+
 		this.client.loadWorld((WorldClient)null);
 
 		if (this.guiScreenServer != null) {
@@ -763,6 +771,10 @@
 		} else {
 			this.client.ingameGUI.getChatGUI().printChatMessage(packetIn.getChatComponent());
 		}
+
+		/* WDL >>> */
+		wdl.WDLHooks.onNHPCHandleChat(this, packetIn);
+		/* <<< WDL */
 	}
 
 	/**
@@ -1117,6 +1129,10 @@
 	public void handleBlockAction(SPacketBlockAction packetIn) {
 		PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
 		this.client.world.addBlockEvent(packetIn.getBlockPosition(), packetIn.getBlockType(), packetIn.getData1(), packetIn.getData2());
+
+		/* WDL >>> */
+		wdl.WDLHooks.onNHPCHandleBlockAction(this, packetIn);
+		/* <<< WDL */
 	}
 
 	/**
@@ -1186,6 +1202,10 @@
 		MapData mapdata = ItemMap.loadMapData(packetIn.getMapId(), this.client.world);
 		packetIn.setMapdataTo(mapdata);
 		this.client.gameRenderer.getMapItemRenderer().updateMapTexture(mapdata);
+
+		/* WDL >>> */
+		wdl.WDLHooks.onNHPCHandleMaps(this, packetIn);
+		/* <<< WDL */
 	}
 
 	public void handleEffect(SPacketEffect packetIn) {
@@ -1551,6 +1571,10 @@
 			String s1 = packetbuffer2.readString(256);
 			this.client.getSoundHandler().func_189520_a(s1, SoundCategory.func_187950_a(s));
 		}
+
+		/* WDL >>> */
+		wdl.WDLHooks.onNHPCHandleCustomPayload(this, packetIn);
+		/* <<< WDL */
 	}
 
 	/**
